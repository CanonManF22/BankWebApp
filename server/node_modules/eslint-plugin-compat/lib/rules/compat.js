"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Lint = _interopRequireWildcard(require("../Lint"));

var _Versioning = _interopRequireWildcard(require("../Versioning"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var _default = {
  meta: {
    docs: {
      description: 'Ensure cross-browser API compatibility',
      category: 'Compatibility',
      recommended: true
    },
    fixable: 'code',
    schema: []
  },

  create(context) {
    // Determine lowest targets from browserslist config, which reads user's
    const browserslistConfig = context.settings.browsers || context.settings.targets;
    const browserslistTargets = (0, _Versioning.Versioning)((0, _Versioning.default)(browserslistConfig));

    function lint(node) {
      const {
        isValid,
        rule,
        unsupportedTargets
      } = (0, _Lint.default)(node, browserslistTargets, new Set(context.settings.polyfills || []));

      if (!isValid) {
        context.report({
          node,
          message: [(0, _Lint.generateErrorName)(rule), 'is not supported in', unsupportedTargets.join(', ')].join(' ')
        });
      }
    }

    return {
      // HACK: Ideally, rules will be generated at runtime. Each rule will have
      //       have the ability to register itself to run on specific AST
      //       nodes. For now, we're using the `CallExpression` node since
      //       its what most rules will run on
      CallExpression: lint,
      MemberExpression: lint,
      NewExpression: lint
    };
  }

};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlcy9jb21wYXQuanMiXSwibmFtZXMiOlsibWV0YSIsImRvY3MiLCJkZXNjcmlwdGlvbiIsImNhdGVnb3J5IiwicmVjb21tZW5kZWQiLCJmaXhhYmxlIiwic2NoZW1hIiwiY3JlYXRlIiwiY29udGV4dCIsImJyb3dzZXJzbGlzdENvbmZpZyIsInNldHRpbmdzIiwiYnJvd3NlcnMiLCJ0YXJnZXRzIiwiYnJvd3NlcnNsaXN0VGFyZ2V0cyIsImxpbnQiLCJub2RlIiwiaXNWYWxpZCIsInJ1bGUiLCJ1bnN1cHBvcnRlZFRhcmdldHMiLCJTZXQiLCJwb2x5ZmlsbHMiLCJyZXBvcnQiLCJtZXNzYWdlIiwiam9pbiIsIkNhbGxFeHByZXNzaW9uIiwiTWVtYmVyRXhwcmVzc2lvbiIsIk5ld0V4cHJlc3Npb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQTs7QUFDQTs7OztlQXlCZTtBQUNiQSxFQUFBQSxJQUFJLEVBQUU7QUFDSkMsSUFBQUEsSUFBSSxFQUFFO0FBQ0pDLE1BQUFBLFdBQVcsRUFBRSx3Q0FEVDtBQUVKQyxNQUFBQSxRQUFRLEVBQUUsZUFGTjtBQUdKQyxNQUFBQSxXQUFXLEVBQUU7QUFIVCxLQURGO0FBTUpDLElBQUFBLE9BQU8sRUFBRSxNQU5MO0FBT0pDLElBQUFBLE1BQU0sRUFBRTtBQVBKLEdBRE87O0FBVWJDLEVBQUFBLE1BQU0sQ0FBQ0MsT0FBRCxFQUEyQjtBQUMvQjtBQUVBLFVBQU1DLGtCQUFxQyxHQUN6Q0QsT0FBTyxDQUFDRSxRQUFSLENBQWlCQyxRQUFqQixJQUE2QkgsT0FBTyxDQUFDRSxRQUFSLENBQWlCRSxPQURoRDtBQUdBLFVBQU1DLG1CQUFtQixHQUFHLDRCQUMxQix5QkFBMkJKLGtCQUEzQixDQUQwQixDQUE1Qjs7QUFJQSxhQUFTSyxJQUFULENBQWNDLElBQWQsRUFBZ0M7QUFDOUIsWUFBTTtBQUFFQyxRQUFBQSxPQUFGO0FBQVdDLFFBQUFBLElBQVg7QUFBaUJDLFFBQUFBO0FBQWpCLFVBQXdDLG1CQUM1Q0gsSUFENEMsRUFFNUNGLG1CQUY0QyxFQUc1QyxJQUFJTSxHQUFKLENBQVFYLE9BQU8sQ0FBQ0UsUUFBUixDQUFpQlUsU0FBakIsSUFBOEIsRUFBdEMsQ0FINEMsQ0FBOUM7O0FBTUEsVUFBSSxDQUFDSixPQUFMLEVBQWM7QUFDWlIsUUFBQUEsT0FBTyxDQUFDYSxNQUFSLENBQWU7QUFDYk4sVUFBQUEsSUFEYTtBQUViTyxVQUFBQSxPQUFPLEVBQUUsQ0FDUCw2QkFBa0JMLElBQWxCLENBRE8sRUFFUCxxQkFGTyxFQUdQQyxrQkFBa0IsQ0FBQ0ssSUFBbkIsQ0FBd0IsSUFBeEIsQ0FITyxFQUlQQSxJQUpPLENBSUYsR0FKRTtBQUZJLFNBQWY7QUFRRDtBQUNGOztBQUVELFdBQU87QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBQyxNQUFBQSxjQUFjLEVBQUVWLElBTFg7QUFNTFcsTUFBQUEsZ0JBQWdCLEVBQUVYLElBTmI7QUFPTFksTUFBQUEsYUFBYSxFQUFFWjtBQVBWLEtBQVA7QUFTRDs7QUFoRFksQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5pbXBvcnQgTGludCwgeyBnZW5lcmF0ZUVycm9yTmFtZSB9IGZyb20gJy4uL0xpbnQnO1xuaW1wb3J0IERldGVybWluZVRhcmdldHNGcm9tQ29uZmlnLCB7IFZlcnNpb25pbmcgfSBmcm9tICcuLi9WZXJzaW9uaW5nJztcbmltcG9ydCB0eXBlIHsgRVNMaW50Tm9kZSB9IGZyb20gJy4uL0xpbnRUeXBlcyc7XG5cbnR5cGUgRVNMaW50ID0ge1xuICBbYXN0Tm9kZVR5cGVOYW1lOiBzdHJpbmddOiAobm9kZTogRVNMaW50Tm9kZSkgPT4gdm9pZFxufTtcblxudHlwZSBDb250ZXh0ID0ge1xuICBub2RlOiBFU0xpbnROb2RlLFxuICBzZXR0aW5nczoge1xuICAgIGJyb3dzZXJzOiBBcnJheTxzdHJpbmc+LFxuICAgIHBvbHlmaWxsczogQXJyYXk8c3RyaW5nPlxuICB9LFxuICBnZXRGaWxlbmFtZTogKCkgPT4gc3RyaW5nLFxuICByZXBvcnQ6ICgpID0+IHZvaWRcbn07XG5cbmV4cG9ydCB0eXBlIEJyb3dzZXJMaXN0Q29uZmlnID1cbiAgfCBBcnJheTxzdHJpbmc+XG4gIHwge1xuICAgICAgcHJvZHVjdGlvbj86IEFycmF5PHN0cmluZz4sXG4gICAgICBkZXZlbG9wbWVudD86IEFycmF5PHN0cmluZz5cbiAgICB9XG4gIHwgbnVsbDtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBtZXRhOiB7XG4gICAgZG9jczoge1xuICAgICAgZGVzY3JpcHRpb246ICdFbnN1cmUgY3Jvc3MtYnJvd3NlciBBUEkgY29tcGF0aWJpbGl0eScsXG4gICAgICBjYXRlZ29yeTogJ0NvbXBhdGliaWxpdHknLFxuICAgICAgcmVjb21tZW5kZWQ6IHRydWVcbiAgICB9LFxuICAgIGZpeGFibGU6ICdjb2RlJyxcbiAgICBzY2hlbWE6IFtdXG4gIH0sXG4gIGNyZWF0ZShjb250ZXh0OiBDb250ZXh0KTogRVNMaW50IHtcbiAgICAvLyBEZXRlcm1pbmUgbG93ZXN0IHRhcmdldHMgZnJvbSBicm93c2Vyc2xpc3QgY29uZmlnLCB3aGljaCByZWFkcyB1c2VyJ3NcbiAgICAvLyBwYWNrYWdlLmpzb24gY29uZmlnIHNlY3Rpb24uIFVzZSBjb25maWcgZnJvbSBlc2xpbnRyYyBmb3IgdGVzdGluZyBwdXJwb3Nlc1xuICAgIGNvbnN0IGJyb3dzZXJzbGlzdENvbmZpZzogQnJvd3Nlckxpc3RDb25maWcgPVxuICAgICAgY29udGV4dC5zZXR0aW5ncy5icm93c2VycyB8fCBjb250ZXh0LnNldHRpbmdzLnRhcmdldHM7XG5cbiAgICBjb25zdCBicm93c2Vyc2xpc3RUYXJnZXRzID0gVmVyc2lvbmluZyhcbiAgICAgIERldGVybWluZVRhcmdldHNGcm9tQ29uZmlnKGJyb3dzZXJzbGlzdENvbmZpZylcbiAgICApO1xuXG4gICAgZnVuY3Rpb24gbGludChub2RlOiBFU0xpbnROb2RlKSB7XG4gICAgICBjb25zdCB7IGlzVmFsaWQsIHJ1bGUsIHVuc3VwcG9ydGVkVGFyZ2V0cyB9ID0gTGludChcbiAgICAgICAgbm9kZSxcbiAgICAgICAgYnJvd3NlcnNsaXN0VGFyZ2V0cyxcbiAgICAgICAgbmV3IFNldChjb250ZXh0LnNldHRpbmdzLnBvbHlmaWxscyB8fCBbXSlcbiAgICAgICk7XG5cbiAgICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydCh7XG4gICAgICAgICAgbm9kZSxcbiAgICAgICAgICBtZXNzYWdlOiBbXG4gICAgICAgICAgICBnZW5lcmF0ZUVycm9yTmFtZShydWxlKSxcbiAgICAgICAgICAgICdpcyBub3Qgc3VwcG9ydGVkIGluJyxcbiAgICAgICAgICAgIHVuc3VwcG9ydGVkVGFyZ2V0cy5qb2luKCcsICcpXG4gICAgICAgICAgXS5qb2luKCcgJylcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIEhBQ0s6IElkZWFsbHksIHJ1bGVzIHdpbGwgYmUgZ2VuZXJhdGVkIGF0IHJ1bnRpbWUuIEVhY2ggcnVsZSB3aWxsIGhhdmVcbiAgICAgIC8vICAgICAgIGhhdmUgdGhlIGFiaWxpdHkgdG8gcmVnaXN0ZXIgaXRzZWxmIHRvIHJ1biBvbiBzcGVjaWZpYyBBU1RcbiAgICAgIC8vICAgICAgIG5vZGVzLiBGb3Igbm93LCB3ZSdyZSB1c2luZyB0aGUgYENhbGxFeHByZXNzaW9uYCBub2RlIHNpbmNlXG4gICAgICAvLyAgICAgICBpdHMgd2hhdCBtb3N0IHJ1bGVzIHdpbGwgcnVuIG9uXG4gICAgICBDYWxsRXhwcmVzc2lvbjogbGludCxcbiAgICAgIE1lbWJlckV4cHJlc3Npb246IGxpbnQsXG4gICAgICBOZXdFeHByZXNzaW9uOiBsaW50XG4gICAgfTtcbiAgfVxufTtcbiJdfQ==