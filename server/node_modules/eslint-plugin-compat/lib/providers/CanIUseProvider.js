"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUnsupportedTargets = getUnsupportedTargets;
exports.default = exports.targetMetadata = void 0;

var _data = _interopRequireDefault(require("caniuse-db/fulldata-json/data-2.0.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// $FlowFixMe: Flow import error
// HACK: modern targets should be determined once at runtime
const targetMetadata = {
  targets: ['chrome', 'firefox', 'opera', 'safari', 'ie', 'edge', 'ios_saf', 'op_mini', 'android', 'bb', 'op_mob', 'and_chr', 'and_ff', 'ie_mob', 'and_uc', 'samsung', 'baidu']
};
exports.targetMetadata = targetMetadata;
const targetNameMappings = {
  chrome: 'Chrome',
  firefox: 'Firefox',
  opera: 'Opera',
  baidu: 'Baidu',
  and_qq: 'QQ Browser',
  safari: 'Safari',
  android: 'Android Browser',
  ie: 'IE',
  edge: 'Edge',
  ios_saf: 'iOS Safari',
  op_mini: 'Opera Mini',
  bb: 'Blackberry Browser',
  op_mob: 'Opera Mobile',
  and_chr: 'Android Chrome',
  and_ff: 'Android Firefox',
  ie_mob: 'IE Mobile',
  and_uc: 'Android UC Browser',
  samsung: 'Samsung Browser'
};
/**
 * Take a target's id and return it's full name by using `targetNameMappings`
 * ex. {target: and_ff, version: 40} => 'Android FireFox 40'
 */

function formatTargetNames(target) {
  return `${targetNameMappings[target.target]} ${target.version}`;
}
/**
 * Check if a browser version is in the range format
 * ex. 10.0-10.2
 */


function versionIsRange(version) {
  return version.includes('-');
}
/**
 * Parse version from caniuse and compare with parsed version from browserslist.
 */


function compareRanges(targetVersion, statsVersion) {
  return targetVersion === parseFloat(statsVersion);
}
/*
 * Check the CanIUse database to see if targets are supported
 */


function canIUseIsNotSupported(node, {
  version,
  target,
  parsedVersion
}) {
  const {
    stats
  } = _data.default.data[node.caniuseId];
  const targetStats = stats[target];
  return versionIsRange(version) ? Object.keys(targetStats).some(statsVersion => versionIsRange(statsVersion) && compareRanges(parsedVersion, statsVersion) ? !targetStats[statsVersion].includes('y') : false) : targetStats[version] && !targetStats[version].includes('y');
}
/**
 * Return an array of all unsupported targets
 */


function getUnsupportedTargets(node, targets) {
  return targets.filter(target => canIUseIsNotSupported(node, target)).map(formatTargetNames);
}
/**
 * Check if the node has matching object or properties
 */


function isValid(node, eslintNode, targets) {
  switch (eslintNode.type) {
    case 'CallExpression':
    case 'NewExpression':
      if (!eslintNode.callee) return true;
      if (eslintNode.callee.name !== node.object) return true;
      break;

    case 'MemberExpression':
      // Pass tests if non-matching object or property
      if (!eslintNode.object || !eslintNode.property) return true;
      if (eslintNode.object.name !== node.object) return true; // If the property is missing from the rule, it means that only the
      // object is required to determine compatibility

      if (!node.property) break;
      if (eslintNode.property.name !== node.property) return true;
      break;

    default:
      return true;
  }

  return !getUnsupportedTargets(node, targets).length;
}

const CanIUseProvider = [// new ServiceWorker()
{
  caniuseId: 'serviceworkers',
  astNodeType: 'NewExpression',
  object: 'ServiceWorker'
}, {
  caniuseId: 'serviceworkers',
  astNodeType: 'MemberExpression',
  object: 'navigator',
  property: 'serviceWorker'
}, // document.querySelector()
{
  caniuseId: 'queryselector',
  astNodeType: 'MemberExpression',
  object: 'document',
  property: 'querySelector'
}, // IntersectionObserver
{
  caniuseId: 'intersectionobserver',
  astNodeType: 'NewExpression',
  object: 'IntersectionObserver'
}, // PaymentRequest
{
  caniuseId: 'payment-request',
  astNodeType: 'NewExpression',
  object: 'PaymentRequest'
}, // Promises
{
  caniuseId: 'promises',
  astNodeType: 'NewExpression',
  object: 'Promise'
}, {
  caniuseId: 'promises',
  astNodeType: 'MemberExpression',
  object: 'Promise',
  property: 'resolve'
}, {
  caniuseId: 'promises',
  astNodeType: 'MemberExpression',
  object: 'Promise',
  property: 'all'
}, {
  caniuseId: 'promises',
  astNodeType: 'MemberExpression',
  object: 'Promise',
  property: 'race'
}, {
  caniuseId: 'promises',
  astNodeType: 'MemberExpression',
  object: 'Promise',
  property: 'reject'
}, // fetch
{
  caniuseId: 'fetch',
  astNodeType: 'CallExpression',
  object: 'fetch'
}, // document.currentScript()
{
  caniuseId: 'document-currentscript',
  astNodeType: 'MemberExpression',
  object: 'document',
  property: 'currentScript'
}, // URL
{
  caniuseId: 'url',
  astNodeType: 'NewExpression',
  object: 'URL'
}, // URLSearchParams
{
  caniuseId: 'urlsearchparams',
  astNodeType: 'NewExpression',
  object: 'URLSearchParams'
}, // performance.now()
{
  caniuseId: 'high-resolution-time',
  astNodeType: 'MemberExpression',
  object: 'performance',
  property: 'now'
}].map(rule => Object.assign({}, rule, {
  isValid,
  getUnsupportedTargets,
  id: rule.property ? `${rule.object}.${rule.property}` : rule.object
}));
var _default = CanIUseProvider;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,